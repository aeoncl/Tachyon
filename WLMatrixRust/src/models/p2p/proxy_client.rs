use std::sync::Mutex;

use byteorder::{BigEndian, ByteOrder};
use log::info;
use rand::Rng;
use tokio::sync::broadcast::Sender;

use crate::models::{slp_payload::{P2PTransportPacket, factories::{P2PTransportPacketFactory, TLVFactory, SlpPayloadFactory, P2PPayloadFactory}, SlpPayload, P2PPayload}, errors::Errors};

use super::pending_packet::PendingPacket;
use chashmap::CHashMap;

pub struct ProxyClient {

    sender : Sender<PendingPacket>,
    pending_packets: CHashMap<u32, PendingPacket>,
    seq_number: u32

}

impl ProxyClient {

    pub fn new(sender: Sender<PendingPacket>) -> Self {
        let mut rng = rand::thread_rng();
        return ProxyClient { sender, pending_packets: CHashMap::new(), seq_number: rng.gen::<u32>()};
    }

    pub fn on_message_received(&mut self, msg : PendingPacket) {

        let p2p_packet = &msg.packet;

            let mut p2p_transport_response = P2PTransportPacket::new(0, None);

            if p2p_packet.is_syn()  {
                self.on_syn_received(&p2p_packet, &mut p2p_transport_response);
            } 
            
            if p2p_packet.is_rak() {
                self.on_rak_received(&msg, &mut p2p_transport_response);
            } 

            if p2p_packet.is_ack() {
                self.on_ack_received(&msg, &mut p2p_transport_response);
            }

            if let Some(request_p2p_payload) = &p2p_packet.payload {

                if let Ok(slp_payload) = request_p2p_payload.get_payload_as_slp() {

                    let p2p_slp_payload_response = self.handle_slp_payload(&slp_payload);

                    if p2p_packet.is_rak() {
                        //store invite response msg for after the handshake
                        let p2p_slp_response = P2PTransportPacket::new(0, Some(p2p_slp_payload_response));

                        let to_store = PendingPacket::new(p2p_slp_response, msg.receiver.clone(), msg.sender.clone());
                        self.pending_packets.insert(self.seq_number.clone(), to_store);

                        p2p_transport_response.set_rak();

                    } else {
                        //no handshake necessary, send the invite response directly
                        p2p_transport_response.payload = Some(p2p_slp_payload_response);
                    }

                } else {
                        // No SLP Payload maybe bytes?
                }
            }
            
            self.reply(&msg, p2p_transport_response);
    }

    fn handle_slp_payload(&self, slp_payload: &SlpPayload) -> P2PPayload {

        let content_type = slp_payload.get_content_type().unwrap(); //todo unwrap_or error slp message
            match content_type.as_str() {
                "application/x-msnmsgr-transreqbody" => {
                    let slp_payload = SlpPayloadFactory::get_200_ok_direct_connect(slp_payload).unwrap(); //todo unwrap_or error slp message
                    let mut p2p_payload = P2PPayloadFactory::get_sip_text_message();
                    p2p_payload.set_payload(slp_payload.to_string().as_bytes().to_owned());
                    return p2p_payload;
                },
                "application/x-msnmsgr-sessionreqbody" => {
                    let slp_payload = SlpPayloadFactory::get_200_ok_session(slp_payload).unwrap(); //todo unwrap_or error slp message
                    let mut p2p_payload = P2PPayloadFactory::get_sip_text_message();
                    p2p_payload.set_payload(slp_payload.to_string().as_bytes().to_owned());
                    return p2p_payload;
                },
                _ => {
                    info!("not handled slp payload yet: {:?}", slp_payload);
                   return P2PPayload::new(0, 0);
                }
            }
    }

    fn on_ack_received(&mut self, ack_msg: &PendingPacket, out_p2p_packet: &mut P2PTransportPacket) {

        let p2p_packet = &ack_msg.packet;

        if let Some(ack_tlv) = p2p_packet.get_ack_tlv() {
            let ack_sequence = BigEndian::read_u32(ack_tlv.value.as_slice());
            if let Some(to_handle) = self.pending_packets.remove(&ack_sequence) {
                out_p2p_packet.payload = to_handle.packet.payload;
            }
        }

        
      
    }

    fn on_rak_received(&mut self, msg: &PendingPacket, out_p2p_packet: &mut P2PTransportPacket){
        out_p2p_packet.set_ack(msg.packet.get_next_squence_number());
    }

    fn on_syn_received(&self, p2p_packet: &P2PTransportPacket, out_p2p_packet: &mut P2PTransportPacket){
        if let Some(client_info_tlv) = p2p_packet.get_client_info_tlv() {
            out_p2p_packet.set_syn(client_info_tlv.to_owned());
        } else {
            let client_info_tlv = TLVFactory::get_client_peer_info();
            out_p2p_packet.set_syn(client_info_tlv);
        }
    }

    fn reply(&mut self, request: &PendingPacket, msg_to_send: P2PTransportPacket) {
        let mut msg_to_send = msg_to_send.clone();
        msg_to_send.sequence_number = self.seq_number.clone();

        //setting next sequence number
        self.seq_number = self.seq_number + msg_to_send.get_payload_length();
        
        self.sender.send(PendingPacket::new(msg_to_send, request.receiver.clone(), request.sender.clone()));
    }

}

#[cfg(test)]
mod tests {
    use std::str::{from_utf8_unchecked, FromStr};

    use byteorder::{BigEndian, ByteOrder};
    use log::info;
    use tokio::sync::broadcast;

    use crate::{sockets::msnp_command::MSNPCommandParser, models::{slp_payload::{P2PTransportPacket, factories::P2PTransportPacketFactory}, msg_payload::MsgPayload, p2p::{pending_packet::PendingPacket, proxy_client::ProxyClient}, msn_user::MSNUser}};


        fn create_invite_packet() -> PendingPacket {
        let msg_command : [u8;806] = [ 0x4d, 0x53, 0x47, 0x20, 0x33, 0x20, 0x44, 0x20, 0x37, 0x39, 0x34, 0x0d, 0x0a, 0x4d, 0x49, 0x4d, 0x45, 0x2d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x70, 0x32, 0x70, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x44, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x33, 0x40, 0x73, 0x68, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3b, 0x7b, 0x37, 0x37, 0x63, 0x34, 0x36, 0x61, 0x38, 0x66, 0x2d, 0x33, 0x33, 0x61, 0x33, 0x2d, 0x35, 0x32, 0x38, 0x32, 0x2d, 0x39, 0x61, 0x35, 0x64, 0x2d, 0x39, 0x30, 0x35, 0x65, 0x63, 0x64, 0x33, 0x65, 0x62, 0x30, 0x36, 0x39, 0x7d, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x53, 0x72, 0x63, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x73, 0x68, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3b, 0x7b, 0x66, 0x35, 0x32, 0x39, 0x37, 0x33, 0x62, 0x36, 0x2d, 0x63, 0x39, 0x32, 0x36, 0x2d, 0x34, 0x62, 0x61, 0x64, 0x2d, 0x39, 0x62, 0x61, 0x38, 0x2d, 0x37, 0x63, 0x31, 0x65, 0x38, 0x34, 0x30, 0x65, 0x34, 0x61, 0x62, 0x30, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x18, 0x03, 0x02, 0x37, 0xe1, 0x62, 0x3d, 0xf3, 0x01, 0x0c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x20, 0x4d, 0x53, 0x4e, 0x4d, 0x53, 0x47, 0x52, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x33, 0x40, 0x73, 0x68, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3b, 0x7b, 0x37, 0x37, 0x63, 0x34, 0x36, 0x61, 0x38, 0x66, 0x2d, 0x33, 0x33, 0x61, 0x33, 0x2d, 0x35, 0x32, 0x38, 0x32, 0x2d, 0x39, 0x61, 0x35, 0x64, 0x2d, 0x39, 0x30, 0x35, 0x65, 0x63, 0x64, 0x33, 0x65, 0x62, 0x30, 0x36, 0x39, 0x7d, 0x20, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x33, 0x40, 0x73, 0x68, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3b, 0x7b, 0x37, 0x37, 0x63, 0x34, 0x36, 0x61, 0x38, 0x66, 0x2d, 0x33, 0x33, 0x61, 0x33, 0x2d, 0x35, 0x32, 0x38, 0x32, 0x2d, 0x39, 0x61, 0x35, 0x64, 0x2d, 0x39, 0x30, 0x35, 0x65, 0x63, 0x64, 0x33, 0x65, 0x62, 0x30, 0x36, 0x39, 0x7d, 0x3e, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x73, 0x68, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3b, 0x7b, 0x66, 0x35, 0x32, 0x39, 0x37, 0x33, 0x62, 0x36, 0x2d, 0x63, 0x39, 0x32, 0x36, 0x2d, 0x34, 0x62, 0x61, 0x64, 0x2d, 0x39, 0x62, 0x61, 0x38, 0x2d, 0x37, 0x63, 0x31, 0x65, 0x38, 0x34, 0x30, 0x65, 0x34, 0x61, 0x62, 0x30, 0x7d, 0x3e, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x54, 0x4c, 0x50, 0x20, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7b, 0x44, 0x38, 0x41, 0x38, 0x42, 0x44, 0x45, 0x32, 0x2d, 0x30, 0x46, 0x41, 0x37, 0x2d, 0x34, 0x46, 0x32, 0x37, 0x2d, 0x39, 0x34, 0x30, 0x38, 0x2d, 0x44, 0x43, 0x42, 0x36, 0x31, 0x34, 0x32, 0x46, 0x38, 0x35, 0x45, 0x42, 0x7d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x30, 0x20, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x7b, 0x41, 0x38, 0x37, 0x44, 0x37, 0x38, 0x33, 0x41, 0x2d, 0x35, 0x46, 0x44, 0x36, 0x2d, 0x34, 0x39, 0x35, 0x45, 0x2d, 0x39, 0x43, 0x46, 0x34, 0x2d, 0x31, 0x38, 0x43, 0x33, 0x37, 0x41, 0x35, 0x41, 0x39, 0x39, 0x45, 0x46, 0x7d, 0x0d, 0x0a, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x62, 0x6f, 0x64, 0x79, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x31, 0x30, 0x35, 0x0d, 0x0a, 0x0d, 0x0a, 0x45, 0x55, 0x46, 0x2d, 0x47, 0x55, 0x49, 0x44, 0x3a, 0x20, 0x7b, 0x34, 0x31, 0x44, 0x33, 0x45, 0x37, 0x34, 0x45, 0x2d, 0x30, 0x34, 0x41, 0x32, 0x2d, 0x34, 0x42, 0x33, 0x37, 0x2d, 0x39, 0x36, 0x46, 0x38, 0x2d, 0x30, 0x38, 0x41, 0x43, 0x44, 0x42, 0x36, 0x31, 0x30, 0x38, 0x37, 0x34, 0x7d, 0x0d, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x3a, 0x20, 0x33, 0x33, 0x38, 0x39, 0x31, 0x33, 0x33, 0x38, 0x33, 0x38, 0x0d, 0x0a, 0x41, 0x70, 0x70, 0x49, 0x44, 0x3a, 0x20, 0x33, 0x35, 0x0d, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x3a, 0x20, 0x31, 0x36, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00];
        let msg_as_str = unsafe {from_utf8_unchecked(&msg_command)}.to_owned();
        info!("MSG command: {}", &msg_as_str);

        let commands = MSNPCommandParser::parse_message(&msg_as_str);
        let command = commands.get(0).unwrap();

        info!("MSG command payload: {}", command.payload.as_str());

        let payload = MsgPayload::from_str(command.payload.as_str()).unwrap();

        let p2p_packet = P2PTransportPacket::from_str(&payload.body).unwrap();
        
        let source = MSNUser::from_mpop_addr_string(payload.get_header(&String::from("P2P-Src")).unwrap().to_owned()).unwrap();
        let dest = MSNUser::from_mpop_addr_string(payload.get_header(&String::from("P2P-Dest")).unwrap().to_owned()).unwrap();
        
        
        return PendingPacket::new(p2p_packet, source, dest);
        }

        fn parse_bytes(bytes: &[u8]) -> PendingPacket {
            let msg_as_str = unsafe {from_utf8_unchecked(&bytes)}.to_owned();

            let commands = MSNPCommandParser::parse_message(&msg_as_str);
            let command = commands.get(0).unwrap();
        
            let payload = MsgPayload::from_str(command.payload.as_str()).unwrap();
    
            let p2p_packet = P2PTransportPacket::from_str(&payload.body).unwrap();
            
            let source = MSNUser::from_mpop_addr_string(payload.get_header(&String::from("P2P-Src")).unwrap().to_owned()).unwrap();
            let dest = MSNUser::from_mpop_addr_string(payload.get_header(&String::from("P2P-Dest")).unwrap().to_owned()).unwrap();
    
            return PendingPacket::new(p2p_packet, source, dest);
        }


        fn get_wireshark_packets() -> Vec<PendingPacket> {
            let mut out = Vec::new();
            let session_invite: [u8;863] = [0x4d, 0x53, 0x47, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x20, 0x38, 0x30, 0x38, 0x0d, 0x0a, 0x4d, 0x49, 0x4d, 0x45, 0x2d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x70, 0x32, 0x70, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x44, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x53, 0x72, 0x63, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x18, 0x03, 0x02, 0x3f, 0xd5, 0x1e, 0xea, 0xf5, 0x01, 0x0c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x20, 0x4d, 0x53, 0x4e, 0x4d, 0x53, 0x47, 0x52, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x20, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x54, 0x4c, 0x50, 0x20, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7b, 0x38, 0x30, 0x39, 0x42, 0x33, 0x38, 0x31, 0x34, 0x2d, 0x43, 0x34, 0x46, 0x34, 0x2d, 0x34, 0x41, 0x37, 0x46, 0x2d, 0x39, 0x42, 0x41, 0x39, 0x2d, 0x45, 0x33, 0x41, 0x34, 0x35, 0x39, 0x46, 0x36, 0x33, 0x41, 0x45, 0x45, 0x7d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x30, 0x20, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x7b, 0x36, 0x46, 0x30, 0x42, 0x45, 0x44, 0x35, 0x38, 0x2d, 0x31, 0x45, 0x36, 0x37, 0x2d, 0x34, 0x43, 0x44, 0x35, 0x2d, 0x41, 0x34, 0x36, 0x37, 0x2d, 0x31, 0x42, 0x46, 0x34, 0x43, 0x36, 0x35, 0x45, 0x31, 0x46, 0x37, 0x32, 0x7d, 0x0d, 0x0a, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x62, 0x6f, 0x64, 0x79, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x31, 0x30, 0x35, 0x0d, 0x0a, 0x0d, 0x0a, 0x45, 0x55, 0x46, 0x2d, 0x47, 0x55, 0x49, 0x44, 0x3a, 0x20, 0x7b, 0x34, 0x31, 0x44, 0x33, 0x45, 0x37, 0x34, 0x45, 0x2d, 0x30, 0x34, 0x41, 0x32, 0x2d, 0x34, 0x42, 0x33, 0x37, 0x2d, 0x39, 0x36, 0x46, 0x38, 0x2d, 0x30, 0x38, 0x41, 0x43, 0x44, 0x42, 0x36, 0x31, 0x30, 0x38, 0x37, 0x34, 0x7d, 0x0d, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x3a, 0x20, 0x33, 0x33, 0x35, 0x38, 0x33, 0x37, 0x37, 0x35, 0x34, 0x32, 0x0d, 0x0a, 0x41, 0x70, 0x70, 0x49, 0x44, 0x3a, 0x20, 0x33, 0x35, 0x0d, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x3a, 0x20, 0x31, 0x36, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00];
            out.push(parse_bytes(&session_invite));
            
            let session_invite_ack: [u8;290] = [0x4d, 0x53, 0x47, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x20, 0x32, 0x33, 0x37, 0x0d, 0x0a, 0x4d, 0x49, 0x4d, 0x45, 0x2d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x70, 0x32, 0x70, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x44, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x53, 0x72, 0x63, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x1c, 0x03, 0x00, 0x00, 0x38, 0xac, 0x94, 0x18, 0x02, 0x04, 0xd5, 0x1e, 0xed, 0x34, 0x01, 0x0c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
            out.push(parse_bytes(&session_invite_ack));

            let transfer_invite : [u8;1023] = [0x4d, 0x53, 0x47, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x20, 0x39, 0x36, 0x38, 0x0d, 0x0a, 0x4d, 0x49, 0x4d, 0x45, 0x2d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x70, 0x32, 0x70, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x44, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x53, 0x72, 0x63, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x08, 0x00, 0x02, 0xef, 0xd5, 0x1e, 0xed, 0x34, 0x08, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x20, 0x4d, 0x53, 0x4e, 0x4d, 0x53, 0x47, 0x52, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x20, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x54, 0x4c, 0x50, 0x20, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7b, 0x44, 0x36, 0x39, 0x37, 0x36, 0x38, 0x30, 0x36, 0x2d, 0x30, 0x31, 0x41, 0x38, 0x2d, 0x34, 0x32, 0x43, 0x45, 0x2d, 0x41, 0x32, 0x33, 0x37, 0x2d, 0x35, 0x32, 0x32, 0x31, 0x44, 0x37, 0x33, 0x38, 0x36, 0x30, 0x44, 0x42, 0x7d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x30, 0x20, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x7b, 0x33, 0x42, 0x43, 0x42, 0x31, 0x42, 0x46, 0x39, 0x2d, 0x37, 0x42, 0x36, 0x44, 0x2d, 0x34, 0x36, 0x45, 0x34, 0x2d, 0x39, 0x31, 0x32, 0x33, 0x2d, 0x45, 0x33, 0x44, 0x42, 0x45, 0x36, 0x33, 0x32, 0x42, 0x45, 0x37, 0x33, 0x7d, 0x0d, 0x0a, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x72, 0x65, 0x71, 0x62, 0x6f, 0x64, 0x79, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x32, 0x38, 0x33, 0x0d, 0x0a, 0x0d, 0x0a, 0x4e, 0x65, 0x74, 0x49, 0x44, 0x3a, 0x20, 0x32, 0x35, 0x31, 0x37, 0x38, 0x39, 0x33, 0x32, 0x32, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x0d, 0x0a, 0x54, 0x43, 0x50, 0x2d, 0x43, 0x6f, 0x6e, 0x6e, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x0d, 0x0a, 0x55, 0x50, 0x6e, 0x50, 0x4e, 0x61, 0x74, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x0d, 0x0a, 0x49, 0x43, 0x46, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x0d, 0x0a, 0x49, 0x50, 0x76, 0x36, 0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x3a, 0x20, 0x0d, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x3a, 0x20, 0x31, 0x0d, 0x0a, 0x4e, 0x61, 0x74, 0x2d, 0x54, 0x72, 0x61, 0x76, 0x2d, 0x4d, 0x73, 0x67, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x57, 0x4c, 0x58, 0x2d, 0x4e, 0x61, 0x74, 0x2d, 0x54, 0x72, 0x61, 0x76, 0x2d, 0x4d, 0x73, 0x67, 0x2d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2d, 0x52, 0x65, 0x71, 0x0d, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x54, 0x52, 0x55, 0x44, 0x50, 0x76, 0x31, 0x20, 0x54, 0x43, 0x50, 0x76, 0x31, 0x20, 0x53, 0x42, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x20, 0x54, 0x55, 0x52, 0x4e, 0x76, 0x31, 0x0d, 0x0a, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x2d, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x3a, 0x20, 0x7b, 0x39, 0x37, 0x45, 0x31, 0x35, 0x31, 0x37, 0x36, 0x2d, 0x35, 0x37, 0x43, 0x30, 0x2d, 0x44, 0x43, 0x42, 0x41, 0x2d, 0x35, 0x35, 0x31, 0x35, 0x2d, 0x44, 0x36, 0x32, 0x45, 0x46, 0x44, 0x39, 0x34, 0x35, 0x30, 0x37, 0x33, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00];
            out.push(parse_bytes(&transfer_invite));
            
            let session_invite_ack_ack: [u8;280] = [0x4d, 0x53, 0x47, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x20, 0x32, 0x32, 0x35, 0x0d, 0x0a, 0x4d, 0x49, 0x4d, 0x45, 0x2d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x70, 0x32, 0x70, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x44, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x53, 0x72, 0x63, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x10, 0x00, 0x00, 0x00, 0xd5, 0x1e, 0xf0, 0x23, 0x02, 0x04, 0x38, 0xac, 0x94, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
            out.push(parse_bytes(&session_invite_ack_ack));

            let session_invite_response: [u8;656] = [0x4d, 0x53, 0x47, 0x20, 0x38, 0x20, 0x44, 0x20, 0x36, 0x34, 0x33, 0x0d, 0x0a, 0x4d, 0x49, 0x4d, 0x45, 0x2d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x70, 0x32, 0x70, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x44, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x53, 0x72, 0x63, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x08, 0x00, 0x01, 0xaa, 0x38, 0xac, 0x94, 0x18, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x54, 0x4c, 0x50, 0x20, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7b, 0x38, 0x30, 0x39, 0x42, 0x33, 0x38, 0x31, 0x34, 0x2d, 0x43, 0x34, 0x46, 0x34, 0x2d, 0x34, 0x41, 0x37, 0x46, 0x2d, 0x39, 0x42, 0x41, 0x39, 0x2d, 0x45, 0x33, 0x41, 0x34, 0x35, 0x39, 0x46, 0x36, 0x33, 0x41, 0x45, 0x45, 0x7d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x7b, 0x36, 0x46, 0x30, 0x42, 0x45, 0x44, 0x35, 0x38, 0x2d, 0x31, 0x45, 0x36, 0x37, 0x2d, 0x34, 0x43, 0x44, 0x35, 0x2d, 0x41, 0x34, 0x36, 0x37, 0x2d, 0x31, 0x42, 0x46, 0x34, 0x43, 0x36, 0x35, 0x45, 0x31, 0x46, 0x37, 0x32, 0x7d, 0x0d, 0x0a, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x62, 0x6f, 0x64, 0x79, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x32, 0x36, 0x0d, 0x0a, 0x0d, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x3a, 0x20, 0x33, 0x33, 0x35, 0x38, 0x33, 0x37, 0x37, 0x35, 0x34, 0x32, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00];
            out.push(parse_bytes(&session_invite_response));

            let transfert_response: [u8;968] = [0x4d, 0x53, 0x47, 0x20, 0x39, 0x20, 0x44, 0x20, 0x39, 0x35, 0x35, 0x0d, 0x0a, 0x4d, 0x49, 0x4d, 0x45, 0x2d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x70, 0x32, 0x70, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x44, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x50, 0x32, 0x50, 0x2d, 0x53, 0x72, 0x63, 0x3a, 0x20, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x08, 0x00, 0x02, 0xe2, 0x38, 0xac, 0x95, 0xc2, 0x08, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x54, 0x4c, 0x50, 0x20, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7b, 0x44, 0x36, 0x39, 0x37, 0x36, 0x38, 0x30, 0x36, 0x2d, 0x30, 0x31, 0x41, 0x38, 0x2d, 0x34, 0x32, 0x43, 0x45, 0x2d, 0x41, 0x32, 0x33, 0x37, 0x2d, 0x35, 0x32, 0x32, 0x31, 0x44, 0x37, 0x33, 0x38, 0x36, 0x30, 0x44, 0x42, 0x7d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x7b, 0x33, 0x42, 0x43, 0x42, 0x31, 0x42, 0x46, 0x39, 0x2d, 0x37, 0x42, 0x36, 0x44, 0x2d, 0x34, 0x36, 0x45, 0x34, 0x2d, 0x39, 0x31, 0x32, 0x33, 0x2d, 0x45, 0x33, 0x44, 0x42, 0x45, 0x36, 0x33, 0x32, 0x42, 0x45, 0x37, 0x33, 0x7d, 0x0d, 0x0a, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x72, 0x65, 0x73, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x33, 0x33, 0x38, 0x0d, 0x0a, 0x0d, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x0d, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x0d, 0x0a, 0x54, 0x43, 0x50, 0x2d, 0x43, 0x6f, 0x6e, 0x6e, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x0d, 0x0a, 0x49, 0x50, 0x76, 0x36, 0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x3a, 0x20, 0x0d, 0x0a, 0x55, 0x50, 0x6e, 0x50, 0x4e, 0x61, 0x74, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x0d, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x3a, 0x20, 0x31, 0x0d, 0x0a, 0x73, 0x72, 0x64, 0x64, 0x41, 0x2d, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x74, 0x6e, 0x49, 0x34, 0x76, 0x50, 0x49, 0x3a, 0x20, 0x35, 0x31, 0x2e, 0x32, 0x2e, 0x30, 0x2e, 0x30, 0x31, 0x0d, 0x0a, 0x74, 0x72, 0x6f, 0x50, 0x2d, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x74, 0x6e, 0x49, 0x34, 0x76, 0x50, 0x49, 0x3a, 0x20, 0x33, 0x32, 0x38, 0x39, 0x34, 0x0d, 0x0a, 0x4e, 0x61, 0x74, 0x2d, 0x54, 0x72, 0x61, 0x76, 0x2d, 0x4d, 0x73, 0x67, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x57, 0x4c, 0x58, 0x2d, 0x4e, 0x61, 0x74, 0x2d, 0x54, 0x72, 0x61, 0x76, 0x2d, 0x4d, 0x73, 0x67, 0x2d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2d, 0x52, 0x65, 0x73, 0x70, 0x0d, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x3a, 0x20, 0x54, 0x43, 0x50, 0x76, 0x31, 0x0d, 0x0a, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x2d, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x3a, 0x20, 0x7b, 0x45, 0x34, 0x37, 0x39, 0x38, 0x36, 0x44, 0x32, 0x2d, 0x39, 0x37, 0x38, 0x42, 0x2d, 0x34, 0x38, 0x41, 0x35, 0x2d, 0x39, 0x32, 0x44, 0x41, 0x2d, 0x44, 0x39, 0x34, 0x32, 0x43, 0x33, 0x38, 0x37, 0x36, 0x39, 0x32, 0x34, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00];
            out.push(parse_bytes(&transfert_response));
            
            return out;
        }




        #[actix_rt::test]
        async fn ack_is_received_when_asked() {
        //arrange
        let packets = get_wireshark_packets();
        let invite_packet = packets.get(0).unwrap();
        let (p2p_sender, mut p2p_receiver) = broadcast::channel::<PendingPacket>(10);

        let mut proxy_client = ProxyClient::new(p2p_sender);

        //act
        proxy_client.on_message_received(invite_packet.clone());

        //assert
        let first_response = p2p_receiver.recv().await.unwrap();
        assert!(first_response.packet.is_ack());
        assert!(first_response.packet.is_rak());

        assert!(first_response.packet.payload.is_none());
    }

    #[actix_rt::test]
    async fn invite_response_is_sent_after_handshake() {
        //arrange
        let packets = get_wireshark_packets();
        let invite_packet = packets.get(0).unwrap();
        
        let source = invite_packet.sender.clone();
        let dest = invite_packet.receiver.clone();

        let (p2p_sender, mut p2p_receiver) = broadcast::channel::<PendingPacket>(10);

        let mut proxy_client = ProxyClient::new(p2p_sender);
        proxy_client.on_message_received(invite_packet.clone());
        let first_response = p2p_receiver.recv().await.unwrap();
        //act
        
        let mut ack = P2PTransportPacketFactory::get_ack(invite_packet.packet.get_next_squence_number(), first_response.packet.get_next_squence_number());
        let ack_packet = PendingPacket::new(ack, source, dest);

        proxy_client.on_message_received(ack_packet.clone());

        //assert
        let invite_response = p2p_receiver.recv().await.unwrap();
        let slp_payload = invite_response.clone().packet.payload.unwrap().get_payload_as_slp().unwrap();
        assert!(!invite_response.packet.is_ack());
        assert!(slp_payload.first_line.contains("200"));
        assert_eq!(invite_response.packet.sequence_number, first_response.packet.get_next_squence_number());
    }

    #[test]
    fn msg_parse_test() {

        env_logger::init_from_env(env_logger::Env::new().default_filter_or("info"));

       let ws_packets = get_wireshark_packets();

       for packet in ws_packets {
            info!("--------START---------");

           info!("packet: {:?}", packet);
           if let Some(ack_tlv) = packet.packet.get_ack_tlv() {
            let session_id = BigEndian::read_u32(ack_tlv.value.as_slice());
            info!("ack_seq_order: {}", session_id);

           }
           info!("--------END---------");

       }
    }

    #[actix_rt::test]
    async fn test() {

        env_logger::init_from_env(env_logger::Env::new().default_filter_or("info"));

       let ws_packets = get_wireshark_packets();

       let invite_response = ws_packets.get(4).unwrap();
       let test = invite_response.packet.to_string();

        let session_invite_response_bytes: [u8;438] = [0x08, 0x00, 0x01, 0xaa, 0x38, 0xac, 0x94, 0x18, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x3a, 0x61, 0x65, 0x6f, 0x6e, 0x73, 0x68, 0x6c, 0x40, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x7b, 0x36, 0x63, 0x30, 0x33, 0x62, 0x31, 0x39, 0x38, 0x2d, 0x32, 0x32, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x66, 0x34, 0x2d, 0x62, 0x34, 0x64, 0x36, 0x2d, 0x38, 0x65, 0x62, 0x35, 0x35, 0x36, 0x37, 0x62, 0x32, 0x65, 0x38, 0x63, 0x7d, 0x3e, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x4d, 0x53, 0x4e, 0x53, 0x4c, 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x54, 0x4c, 0x50, 0x20, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7b, 0x38, 0x30, 0x39, 0x42, 0x33, 0x38, 0x31, 0x34, 0x2d, 0x43, 0x34, 0x46, 0x34, 0x2d, 0x34, 0x41, 0x37, 0x46, 0x2d, 0x39, 0x42, 0x41, 0x39, 0x2d, 0x45, 0x33, 0x41, 0x34, 0x35, 0x39, 0x46, 0x36, 0x33, 0x41, 0x45, 0x45, 0x7d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x7b, 0x36, 0x46, 0x30, 0x42, 0x45, 0x44, 0x35, 0x38, 0x2d, 0x31, 0x45, 0x36, 0x37, 0x2d, 0x34, 0x43, 0x44, 0x35, 0x2d, 0x41, 0x34, 0x36, 0x37, 0x2d, 0x31, 0x42, 0x46, 0x34, 0x43, 0x36, 0x35, 0x45, 0x31, 0x46, 0x37, 0x32, 0x7d, 0x0d, 0x0a, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x6d, 0x73, 0x6e, 0x6d, 0x73, 0x67, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x62, 0x6f, 0x64, 0x79, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x32, 0x36, 0x0d, 0x0a, 0x0d, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x3a, 0x20, 0x33, 0x33, 0x35, 0x38, 0x33, 0x37, 0x37, 0x35, 0x34, 0x32, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00];


        assert_eq!(session_invite_response_bytes, test.as_bytes());
        
    }


}